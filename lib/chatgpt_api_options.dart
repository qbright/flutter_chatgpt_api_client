// ignore_for_file: non_constant_identifier_names

part of './chatgpt_api_client.dart';

class ChatGptModelOption {
  /// ID of the model to use. You can use the List models API to see all of your available models
  /// or see our Model overview for descriptions of them.
  final String model;

  /// The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
  /// Note that <|endoftext|> is the document separator that the model sees during training
  /// so if a prompt is not specified the model will generate as if from the beginning of a new document.
  List<String> propmt = [];

  /// The suffix that comes after a completion of inserted text.
  final String? suffix;

  /// The maximum number of tokens to generate in the completion.
  /// The token count of your prompt plus max_tokens cannot exceed the model's context length.
  /// Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
  final int max_tokens;

  /// What sampling temperature to use, between 0 and 2.
  /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  /// We generally recommend altering this or top_p but not both.
  final num temperature;

  /// An alternative to sampling with temperature, called nucleus sampling,
  /// where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  /// We generally recommend altering this or temperature but not both.
  final int top_p;

  /// How many completions to generate for each prompt.
  /// Note: Because this parameter generates many completions, it can quickly consume your token quota.
  /// Use carefully and ensure that you have reasonable settings for max_tokens and stop.
  final int n;

  /// Whether to stream back partial progress.
  /// If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
  final bool stream;

  /// Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens.
  /// The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
  /// The maximum value for logprobs is 5. If you need more than this, please contact us through our Help center and describe your use case.
  final int? logprobs;

  /// Echo back the prompt in addition to the completion
  final bool echo;

  /// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
  final List<String>? stop;

  /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/api-reference/parameter-details )
  final num presence_penalty;

  /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
  /// [See more information about frequency and presence penalties.](https://platform.openai.com/docs/api-reference/parameter-details)
  final num frequency_penalty;

  ///Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
  /// When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
  /// Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
  final int best_of;

  /// Modify the likelihood of specified tokens appearing in the completion.
  /// Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100.
  /// You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling.
  /// The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
  /// As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
  final Map<String, dynamic>? logit_bias;

  /// The maximum number of propmt, if not set, it is unlimited
  /// Set it to determine the propmt count by each request
  final int? maxPropmtStack;

  ChatGptModelOption(
      {this.model = "text-davinci-003",
      this.suffix,
      this.max_tokens = 1000,
      this.temperature = 0.2,
      this.top_p = 1,
      this.n = 1,
      this.stream = false,
      this.logprobs,
      this.echo = false,
      this.stop,
      this.presence_penalty = 0,
      this.frequency_penalty = 0,
      this.best_of = 1,
      this.maxPropmtStack,
      this.logit_bias});

  pushPropmt(String msg) {
    propmt.add(msg);
  }

  Map<String, dynamic> toJson() {
    Map<String, dynamic> json = {};

    json['model'] = model;

    json['suffix'] = suffix;

    json['max_tokens'] = max_tokens;

    json['temperature'] = temperature;

    json['top_p'] = top_p;
    json['prompt'] = propmt.join('');
    json['n'] = n;
    json['stream'] = stream;

    if (logprobs != null) {
      json['logprobs'] = logprobs;
    }

    json['echo'] = echo;

    if (stop != null) {
      json['stop'] = stop;
    }
    json['presence_penalty'] = presence_penalty;
    json['frequency_penalty'] = frequency_penalty;
    json['best_of'] = best_of;
    if (logit_bias != null) {
      json['logit_bias'] = logit_bias;
    }

    return json;
  }
}
